#+STARTUP: overview
[[http://tldp.org/LDP/Bash-Beginners-Guide/html/Bash-Beginners-Guide.html][TLDP Beginner's Bash Guide]]
* Bash
   :PROPERTIES:
   :VISIBILITY: folded
   :END:
** Startup
   - What is a login shell?
     - Shell that you get when you login -- has authentication
     - Invoked by =bash -l= or =bash --login=
   - What files does a login shell read?
     - =/etc/profile=, =~/.bash_profile=, =~/.bash_login=, or =~/.profile=, with the
       next looked for only if the previous isn't found
   - What is an interactive shell?
     - Shell that you get through other applications
     - Invoked by =bash -i=
   - What files does an interactive shell read?
     - =~/.bashrc=
     - You can source =~/.bashrc= via =~/.bash_profile= with
       #+BEGIN_SRC bash
         if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
       #+END_SRC
       (the =.= is equivalent to =source=)
   - What file is read on logout?
     - =~/.bash_logout=
** Init files
   - What does =/etc/profile= do?
     - Set up system-wide settings and paths
   - What does =/etc/bashrc= do?
     - bash-specific configurations
   - What does =~/.bash_profile= do? 
     - configure user environments
   - What does =~/.bash_login= do?
     - executed when you login
   - What does =~/.profile= do?
     - read only if there's no =~/.bash_profile= or =~/.bash_login=
     - other shells may read this so don't use bash-specific syntax
   - What does =~/.bashrc= do?
     - used on interactive non-login shells
   - What does =~/.bash_logout= do?
     - runs right before logout
** TODO Builtins
   - What are the =sh= builtins and what do they do?
     - =:=
     - =.=
     - =break=
     - =cd=
     - =continue=
     - =eval=
     - =exec=
     - =exit=
     - =export=
     - =getopts=
     - =hash=
     - =pwd=
     - =readonly=
     - =return=
     - =set=: set options that are inherited from =sh= to other shells
     - =shift=
     - =test=
     - =[=
     - =times=
     - =trap=
     - =umask=
     - =unset=
   - What are the =bash= builtins and what do they do?
     - =alias=
     - =bind=
     - =builtin=
     - =command=
     - =declare=
     - =echo=
     - =enable=
     - =help=
     - =let=
     - =local=
     - =logout=
     - =printf=
     - =read=
     - =shopt=: set bash-specific options
     - =type=
     - =typeset=
     - =ulimit=
     - =unalias=
   - What are the POSIX mode special builtins and what do they do?
     - =:=
     - =.=
     - =break=
     - =continue=
     - =eval=
     - =exec=
     - =exit=
     - =export=
     - =readonly=
     - =return=
     - =set=
     - =shift=
     - =trap=
     - =unset=
** Debugging
   - What =set= options are there and what do they do?
     - =set -f= / =set -o noglob=: disables file name generation using globs (disable glob expansion)
     - =set -v= / =set -o verbose=: print shell lines as they are read
     - =set -x= / =set -o xtrace=: print command lines before executing command
   - What tools can we use for debugging?
     - bashdb
     - =set -[f|v|x]=
** Variables
   - What is an environment variable?
     - Environment variables are global variables
   - How do we show all environment variables?
     - =printenv= or =env=
   - How do we set a variable?
     #+BEGIN_SRC bash
       variable="value"
     #+END_SRC
   - What is good practice when setting variables?
     - Quote the value!
   - How do we access the value of a variable?
     - =$variable=
   - What does exporting a variable do?
     - Allows subshells (not parent shells) to see the variable and its changes
   - What names are reserved?
     - =CDPATH=, =HOME=, =IFS=, =MAIL=, =MAILPATH=, =OPTARG=, =OPTIND=, =PATH=, =PS1=, =PS2=
     - and a whole lot more... consult the bash manpage
** Special Parameters
   - What does =$*= do?
     - All positional parameters.  When quoted, makes one string. **NOT USUALLY WHAT YOU WANT**
   - What does =$@= do?
     - All positional parameters.  When quoted, makes a string array
   - What does =$#= do?
     - Number of positional parameters
   - What does =$?= do?
     - Most recent exit status
   - What does =$-= do?
     - Current set of option flags from command invocation, =set=, or shell
   - What does =$$= do?
     - PID Of shell
   - What does =$!= do?
     - PID of last executed background command
   - What does =$0= do?
     - Name of your shell
   - What does =$_= do?
     - Last parameter of previous command
** Quoting things
   - What does \ do?
     - Escapes the next character
   - What does 'string' do?
     - Takes the literal string
   - What does "string" do?
     - Takes the literal string except for $, `, and \
   - What does "$'string'" do?
     - backslash-escaped characters are replaced as specified by the ANSI-C standard
   - What does $"string" do?
     - translated according to the current locale
** Brace Expansion
   - When is brace expansion performed?
     - FIRST
     - Therefore, all other special characters are maintained
   - What does =echo f{ee,oo}d= expand to?
     - =feed food=
** Tilde Expansion
   - What does =~= expand to?
     - =$HOME=
   - What does =~+= expand to?
     - =$PWD=
   - What does =~-= expand to?
     - =$OLDPWD=
   - What do =~+N=  and =~N= expand to, where =N= is an integer?
     - the directory =N= down from the top of the directory stack
   - What does =~-N= expand to, where =N= is an integer?
     - the director =N= up from the bottom of the directory stack
** Shell Parameter Expansion
   - What does =$N= expand to, where =N= is an integer?
     - The nth parameter given
   - What must you do to refer to the 10th parameter and on?
     - Wrap it in braces: =${10}=
   - What does =x=y; y=z; echo ${!x}= output?
     - This is /indirect expansion/, and outputs =z=
   - What does =echo ${foo:=bar}= do?
     - This creates =foo= with value =bar= /only if it doesn't already exist/
** Command Substitution
   - What does =$(cmd)= do?
     - This runs =cmd= and substitutes the output
   - What does =`cmd`= do?
     - This runs =cmd= and substitutes the output
     - /DO NOT USE/
** Arithmetic Expansion
   - What does =$((expression))= do?
     - =expression= acts as if it were in double quotes, but double quotes aren't specially treated
     - All tokens undergo parameter expansion, command substitution, quote
       removal, and arithmetic expansion
     - Finally, the expression is evaluated
     - Caveats
       - /Fixed-width integers with no overflow checks/
       - Leading zeros make numbers octal
       - Leading =0x= or =0X= make numbers hexadecimal
       - Leading =n#= makes numbers base =n=
   - What does =$[expression]= do?
     - Same thing old and deprecated
** Process Substitution
   - What does =<(cmd)= do?
     - The output of =cmd= becomes an input for something else
   - What does =>(cmd)= do?
     - The output of something else becomes input for =cmd=
** Word Splitting
   - What does =$IFS= contain?
     - The characters that the shell considers delimiters
     - <space><tab><newline> by default
   - How are words split?
     - Any sequence of characters in =$IFS= separates words
   - What if =$IFS= is not the default?
     - If there is a whitespace character in =$IFS= then leading and trailing
       whitespace is stripped
     - If there is a non-whitespace character in =$IFS= then it is used as a delimiter
   - What if =$IFS= is =NULL=?
     - No word splitting occurs
** File Name Expansion
   - What happens after word splitting?
     - Shell searches for =*=, =?=, and =[=, which indicate patterns
   - What are patterns replaced by?
     - A sorted list of file names matching the pattern
     - What if there are no matches?
       - If shell option =nullglob= is set, the pattern is removed
       - If shell option =nullglob= is unset, the pattern remains
     - What does =nocaseglob= do?
       - Pattern match becomes case insensitive
     - What does the variable =GLOBIGNORE= do?
       - In a pattern match, if a match is found in =GLOBIGNORE=, it is removed
         from the list of matches
       - =.= and =..= are always ignored
     - What does the shell option =dotglob= do?
       - When enabled, =.*= files will be matched
** Aliases
   - What is an alias?
     - Aliases are strings that are substituted for a word when used as the
       /FIRST WORD/ of a /SIMPLE COMMAND/
   - How do you set an alias?
     - =alias string=replacement=
   - How do you remove an alias?
     - =unalias string=
   - How do you list aliases?
     - =alias=
   - What if the last character of an alias is a space or tab?
     - The next command in the word following the alias is also checked for alias expansion
   - In what kind of shell are aliases expanded?
     - Interactive shells
     - (Unless =expand_aliases= is set with =shopt=)
   - Which shells recognize aliases?
     - Only =bash=
   - Which are faster, aliases, or functions?
     - Functions
** Options
   - How do you show options?
     - =set -o=
   - How do you set options?
     - =set -o <optionname>=
   - How do you unset options?
     - =set +o <optionname>=
   - Useful options?
     - =-u=: unset variables are error
     - =-x=: tracing
     - =-v=: verbose
** Regex
   - What matches any single character?
     - =.=
   - What indicates the previous character is matched 0 or 1 time?
     - =?=
   - What indicates that the previous character is matched 0 or more times?
     - =*=
   - What indicates that the previous character is matched 1 or more times?
     - =+=
   - What matches a character =N= times?
     - ={N}=
   - What matches a character =N= or more times?
     - ={N,}=
   - What matches a character =N= or more times but not =M= or more times?
     - ={N,M}=
   - What is the range indicator?
     - =-=
   - What matches the beginnning of a line?
     - =^=
   - What matches the end of a line? 
     - =$=
   - What matches a word border?
     - =\b=
   - What matches a whitespace that's not a word border?
     - =\B=
   - What matches an empty string at the beginning of a word?
     - =\<=
   - What matches an empty string at the end of a word?
     - =\>=
   - When do metacharacters =?+{|}()= lose their meaning?
     - When only basic regexes are enabled (default grep)
   - What are character classes?
     - Matches any character enclosed by =[= and =]=
     - Matches any character not enclosed if the first character is =^=
     - Matches any character in a range if a range operator =-= is used
** Sed intro
   - Print lines that match a pattern
     - =sed -n '/pattern/p' file= (-n because otherwise sed prints everything,
       and matched lines twice)
   - Delete lines matching a pattern 
     - =sed -n '/pattern/d' file=
   - Delete lines 2 through 4
     - =sed -n '2,4d' file=
   - Delete lines 3 and onward
     - =sed -n '3,$d' file=
   - Delete lines between first line containing "a text" and next line
     containing "This"
     - =sed -n '/a text/,/This/p' file=
   - Find and replace
     - =sed 's/find/replace/g' file=
   - Insert at beginning of each line
     - =sed 's/^/> /' file=
** Awk intro
   - What does =$0= hold?
     The entire line
   - What does =$n= hold for =$n>=1=?
     - The =nth= field
   - Print fields
     - =awk '{print $5 $9}'=
   - Match and do something
     - =awk '/match/ { print $0 }'=
   - What do =BEGIN= and =END= do?
     - They allow you do things at the beginning and end of the program
   - What is the field separator?
     - The variable =FS= controls what delineates fields when the file is read
   - What is the output field separator?
     - The variable =OFS= controls how fields are separated when they are printed
   - What is the output record separator?
     - The variable =ORS= separates lines on output
   - What is the number of records?
     - =NR= is the number of records that have been processed
** Conditionals
   - What is the basic form of =if=?
     - =if TEST; then STUFF; fi=
   - =[ -a file ]=, =[ -e file ]=
     - Tests if =file= exists
   - =[ -d file ]=
     - Tests if =file= is a directory
   - =[ -f file ]=
     - Tests if =file= is a regular file and exists
   - =[ -r file ]=
     - Tests if =file= is readable
   - =[ -s file ]=
     - Tests if =file= is nonempty
   - =[ -w file ]=
     - Tests if =file= is writable
   - =[ -x file ]=
     - Tests if =file= is executable
   - =[ -L file ]=
     - Tests if =file= is a symlink
   - =[ -N file ]=
     - Tests if =file= has been modified since last read
   - =[ -S file ]=
     - Tests if =file= is a socket
   - =[ file -nt file2 ]=
     - Tests if =file= is newer than =file2= or if it exists and =file2= doesn't
     - use =-ot=, =-ef= for older and same
   - =[ -o option ]=
     - Tests if =option= is set
   - =[ -z string ]=
     - Tests if =string= is length 0
     - =-n= for nonzero length
   - Typical arithmetic comparators
     - These are for STRINGS
   - =-eq, -ne, -lt, -le, -gt, -ge=
     - Arithmetic comparators
   - =[ ! expr ]=
     - Not =expr=
   - =[ expr -a expr2 ]=
     - And
   - =[ expr -o expr2 ]=
     - Or
   - What's the difference between single and double brackets?
     - Double brackets prevent word splitting of variables, so things like
       =VAR=="=spaces here=" don't get expanded
   - Elif, else?
     =if ... ; then ... ; elif ... ; then ... ; else ... ; fi
   - Case
     - =case expr in case1) ... ;; case2) ... ;; esac
** Read
   - =read [options] Name1 Name2 ...=
     - Read whitespace delimited input from stdin into =Name1, Name2...=
   - =-a=
     - Read input into an array
   - =-d=
     - Use this to delimit the input line instead of newline
   - =-e=
     - Use readline
   - =-n nchars=
     - Read nchars only
   - =-p prompt=
     - Display prompt ahead of input
   - =-r=
     - Do not consider backslash as an escape character
   - =t timeout=
     - Use a timeout
   - =-u FD=
     - Use =FD= file descriptor as input
** Loops
   - =for name in list; do ...; done=
     - do something for every =name= in =list=, =name= is bound.
     - if =list= isn't given, then =in $@= is used instead.
   - =while [ $i -lt 4 ]; do ...; i=$[$i+1]; done=
     - Just a while loop, note how =i= is updated
   - =until=
     - Same as while loop, but waits for conditional to be true
   - =break=, =continue=
     - As normal, =break= allows you to control which loop to break out of in
       nested loops.
   - =select name in list; do ...; done=
     - Provides a nice interface for selection
     - Number makes selection
     - EOF exists
     - Set =PS3= for the prompt string
   - =shift=
     - Generally used with =while (( "$#" )) ; do ...; done=
       - =(( ))= evaluates arithmetic
       - Just keep using =$1= until arguments are all shifted away
** Variables
   - =declare=
     - Use =declare -option var=value=
     - options:
       - =-a=: array
       - =-f=: function
       - =-i=: integer
       - =-p=: display attributes and values of var, ignore all other flags
       - =-r=: read only
       - =-t=: add trace attribute
       - =-x=: export
   - =readonly=
     - Makes a variable constant, has =-a, -f, -p=
   - Arrays
     - =array[n]=value=
     - =declare -a array=
     - =array=(val1 val2 ...)=
     - To use:
       - =${array[*]}=
   - Length of array
     - =${#array}=
   - Substitution
     - =${VAR:-word}=
     - If =VAR= is unset or null, substitute expansion of =word=, otherwise
       expansion of =VAR=
   - Strip substring
     - =${VAR:offset:length}=
     - Remove =offset= characters
     - Keep =length= characters after offset
   - Strip pattern from head
     - =${VAR#pattern}= strips the shortest pattern
     - =${VAR##pattern}= strips the longest pattern
   - Strip pattern from tail
     - =${VAR%pattern}= strips the shortest pattern
     - =${VAR%%pattern}= strips the longest pattern
   - Substitution
     - =${VAR/search/replace}= replaces the first instance of =search= with =replace=
     - =${VAR//search/replace}= replaces all instances of =search= with =replace=
** Functions
   - Basic Syntax
     #+BEGIN_SRC bash
       function FUNCTION_NAME { commands; }

       FUNCTION_NAME () { commands; }
     #+END_SRC

   - What happens to positional arguments when a function is executed?
     - They are updated to reflect what was passed to the function

** Signals and Traps
   - What signals are there?
     - look at =man signal=
   - What's a trap?
     - allows script to catch a signal and process it (SIGKILL and SIGSTOP excluded)
       #+BEGIN_SRC bash
         trap 'echo "hello world"' SIGTERM SIGINT

         echo "pid is $$"

         while :
         do
             sleep 60
         done
       #+END_SRC

   - Detect variable usage
     #+BEGIN_SRC bash
       declare -t x="foo"

       trap 'echo "x is used here: $x"' DEBUG

     #+END_SRC
